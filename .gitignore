typhoon/
predictions*/
ens-evaluate/tigge_*/
*.nc
*.tc
tigge_data*/
*.ipynb
data/
models/
*.zarr/
.venv/
venv/
.ipynb_checkpoints/
wandb/
tb_logs/
__pycache__/
*.pt
*.pth
*.ckpt
*.npz
*.npy
*.parquet
*.nc
*.grib*

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# --- Evaluation artifacts (exclude) ---
# Root-level eval outputs you showed
/crps_*.csv
/crps_*.png
/timing_results_*.csv
/prediction_files_*.csv
/eval_*_*.png
/eval_*_*.csv
/gencast_*_crps_*.*          # e.g., csv/png
/ecmwf_vs_era5_*_results*.csv
/*_leadtime_stats*.csv

# Inside evaluation/: keep code, ignore artifacts
evaluation/**/*.png
evaluation/**/*.mp4
evaluation/**/*results*.csv
evaluation/**/*histogram*.png
evaluation/**/tmp*.png
!evaluation/**/*.py
!evaluation/**/*.md
!evaluation/**/*.yaml
!evaluation/**/*.yml

gencast_025deg_eval_local.py
gencast_025deg_eval_local_with_predictions.py
gencast_025deg_eval_sparse.py
gencast_crps_2t_results.csv
gencast_eval_typhoon.py
gencast_mini_demo.py
gencast_mini_demo_original.py
gencast_mini_eval8.py
gencast_mini_eval_local.py
gencast_mini_eval_local_w_plot.py
gencast_mini_eval_local_with_predictions.py
gencast_mini_run2.py
gencast_mini_train.py
gencast_mini_train10.py
gencast_mini_train10_debug.py
gencast_mini_train2.py
gencast_mini_train3.py
gencast_mini_train4.py
gencast_mini_train5.py
gencast_mini_train6.py
gencast_mini_train7.py
gencast_mini_train8.py
gencast_mini_train8_debug.py
gencast_mini_train8_debug2.py
gencast_mini_train8_resume.py
gencast_mini_train8_resume_continual.py
gencast_mini_train9.py
gencast_mini_train9_debug.py

eval.sh
eval_saved.py
eval_saved_corrected.py
eval_saved_memory_efficient.py

merge_precipitation.py
merge_precipitation2.py
prep_te.py
rename.py
rename_2.py
rename_3.py
rename_4.py
sample_download.py
setup_tigge_download.sh
test_tigge_config.py
tigge_ens_download.py
tigge_ens_download_2t.py
tigge_ens_download_2t_whole.py
tigge_ens_download_pl_jan_jun.py
tigge_ens_download_pl_jul_dec.py
tigge_ens_download_sfc.py
.cursor/rules/env-rule.mdc
# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
venv2/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include it in version control.
.idea/

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# Machine Learning / Data Science specific
*.h5
*.hdf5
# *.pkl
# *.pickle
*.joblib
*.model
*.weights
*.ckpt
checkpoints/
logs/
tensorboard/
wandb/
mlruns/
.mlflow/

# Data files (uncomment if you want to ignore data)
# *.csv
# *.json
# *.parquet
# *.feather
# *.xlsx
# *.xls
# data/
# datasets/

# Model outputs and experiments
output/
outputs/
results/
experiments/
runs/
*.txt
*.out

# Temporary and debug files
debug*.py
temp/
tmp/
*.tmp
*.temp

# JAX/XLA cache
.jax_cache/

# CUDA/GPU related
*.ptx
*.cubin

# Large files that shouldn't be in git
*.bin
*.tar.gz
*.zip
*.7z

# Configuration files that might contain secrets
config.ini
secrets.yaml
.secrets
